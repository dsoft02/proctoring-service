/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Exam } from "./Exam";
import { ExamCountArgs } from "./ExamCountArgs";
import { ExamFindManyArgs } from "./ExamFindManyArgs";
import { ExamFindUniqueArgs } from "./ExamFindUniqueArgs";
import { CreateExamArgs } from "./CreateExamArgs";
import { UpdateExamArgs } from "./UpdateExamArgs";
import { DeleteExamArgs } from "./DeleteExamArgs";
import { SessionFindManyArgs } from "../../session/base/SessionFindManyArgs";
import { Session } from "../../session/base/Session";
import { ExamService } from "../exam.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Exam)
export class ExamResolverBase {
  constructor(
    protected readonly service: ExamService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Exam",
    action: "read",
    possession: "any",
  })
  async _examsMeta(
    @graphql.Args() args: ExamCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Exam])
  @nestAccessControl.UseRoles({
    resource: "Exam",
    action: "read",
    possession: "any",
  })
  async exams(@graphql.Args() args: ExamFindManyArgs): Promise<Exam[]> {
    return this.service.exams(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Exam, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Exam",
    action: "read",
    possession: "own",
  })
  async exam(@graphql.Args() args: ExamFindUniqueArgs): Promise<Exam | null> {
    const result = await this.service.exam(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Exam)
  @nestAccessControl.UseRoles({
    resource: "Exam",
    action: "create",
    possession: "any",
  })
  async createExam(@graphql.Args() args: CreateExamArgs): Promise<Exam> {
    return await this.service.createExam({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Exam)
  @nestAccessControl.UseRoles({
    resource: "Exam",
    action: "update",
    possession: "any",
  })
  async updateExam(@graphql.Args() args: UpdateExamArgs): Promise<Exam | null> {
    try {
      return await this.service.updateExam({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Exam)
  @nestAccessControl.UseRoles({
    resource: "Exam",
    action: "delete",
    possession: "any",
  })
  async deleteExam(@graphql.Args() args: DeleteExamArgs): Promise<Exam | null> {
    try {
      return await this.service.deleteExam(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Session], { name: "sessions" })
  @nestAccessControl.UseRoles({
    resource: "Session",
    action: "read",
    possession: "any",
  })
  async findSessions(
    @graphql.Parent() parent: Exam,
    @graphql.Args() args: SessionFindManyArgs
  ): Promise<Session[]> {
    const results = await this.service.findSessions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
