/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Violation } from "./Violation";
import { ViolationCountArgs } from "./ViolationCountArgs";
import { ViolationFindManyArgs } from "./ViolationFindManyArgs";
import { ViolationFindUniqueArgs } from "./ViolationFindUniqueArgs";
import { CreateViolationArgs } from "./CreateViolationArgs";
import { UpdateViolationArgs } from "./UpdateViolationArgs";
import { DeleteViolationArgs } from "./DeleteViolationArgs";
import { Session } from "../../session/base/Session";
import { ViolationService } from "../violation.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Violation)
export class ViolationResolverBase {
  constructor(
    protected readonly service: ViolationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Violation",
    action: "read",
    possession: "any",
  })
  async _violationsMeta(
    @graphql.Args() args: ViolationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Violation])
  @nestAccessControl.UseRoles({
    resource: "Violation",
    action: "read",
    possession: "any",
  })
  async violations(
    @graphql.Args() args: ViolationFindManyArgs
  ): Promise<Violation[]> {
    return this.service.violations(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Violation, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Violation",
    action: "read",
    possession: "own",
  })
  async violation(
    @graphql.Args() args: ViolationFindUniqueArgs
  ): Promise<Violation | null> {
    const result = await this.service.violation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Violation)
  @nestAccessControl.UseRoles({
    resource: "Violation",
    action: "create",
    possession: "any",
  })
  async createViolation(
    @graphql.Args() args: CreateViolationArgs
  ): Promise<Violation> {
    return await this.service.createViolation({
      ...args,
      data: {
        ...args.data,

        session: args.data.session
          ? {
              connect: args.data.session,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Violation)
  @nestAccessControl.UseRoles({
    resource: "Violation",
    action: "update",
    possession: "any",
  })
  async updateViolation(
    @graphql.Args() args: UpdateViolationArgs
  ): Promise<Violation | null> {
    try {
      return await this.service.updateViolation({
        ...args,
        data: {
          ...args.data,

          session: args.data.session
            ? {
                connect: args.data.session,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Violation)
  @nestAccessControl.UseRoles({
    resource: "Violation",
    action: "delete",
    possession: "any",
  })
  async deleteViolation(
    @graphql.Args() args: DeleteViolationArgs
  ): Promise<Violation | null> {
    try {
      return await this.service.deleteViolation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Session, {
    nullable: true,
    name: "session",
  })
  @nestAccessControl.UseRoles({
    resource: "Session",
    action: "read",
    possession: "any",
  })
  async getSession(
    @graphql.Parent() parent: Violation
  ): Promise<Session | null> {
    const result = await this.service.getSession(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
